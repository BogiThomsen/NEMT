swagger: "2.0"

info:
  title: "API"
  description: description of api
  version: "1.0"

basePath: /api

paths:
  /add:
    post:
      summary: Adds a user to the database.
      operationId: user_data_access.post_user
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/user'
      responses:
        200:    # status code
          description: User was added Sucessfully.
        400:
          description: User already exists
  /get/{username}:
    get:
      summary: Returns a user in the form of a json array.
      operationId: user_data_access.get_user
      produces:
        - application/json
      responses:
        200:    # status code
          description: User was returned sucessfully.
      parameters:
        - $ref: '#/parameters/username'

  /getId/{username}:
    get:
      summary: Returns a userId.
      operationId: user_data_access.get_user_id_by_username
      produces:
        - text/plain
      parameters:
        - $ref: '#/parameters/username'
      responses:
        200:    # status code
          description: UserId was returned sucessfully.
  # /update/username:
  #   patch:
  #     summary: Updates the username of a user.
  #     operationId: user_data_access.patch_username
  #     consumes:
  #       - application/json
  #     parameters:
  #       - in: body
  #         name: user
  #         description: The user who needs to update username.
  #         schema:
  #           type: object
  #           required:
  #             - username
  #             - userId
  #           properties:
  #             username:
  #               type: string
  #             userId:
  #               type: string
  #     responses:
  #       200:    # status code
  #         description: Username was updated sucessfully.
  # /update/password:
  #   patch:
  #     summary: Updates the password of a user.
  #     operationId: user_data_access.patch_password
  #     consumes:
  #       - application/json
  #     parameters:
  #       - in: body
  #         name: user
  #         description: The user who needs to update a password.
  #         schema:
  #           type: object
  #           required:
  #             - password
  #             - userId
  #           properties:
  #             password:
  #               type: string
  #             userId:
  #               type: string
  #     responses:
  #       200:    # status code
  #         description: Password was updated sucessfully.
  /delete/{username}:
    delete:
      summary: deletes a user.
      operationId: user_data_access.delete_user
      parameters:
        - $ref: '#/parameters/username'
      responses:
        200:    # status code
          description: User was deleted sucessfully.
  # /list/add:
  #   patch:
  #     summary: Adds an ID to specified list.
  #     operationId: user_data_access.add_to_user
  #     consumes:
  #       - application/json
  #     parameters:
  #       - in: body
  #         name: userUpdate
  #         description: The user update data.
  #         schema:
  #           type: object
  #           required:
  #             - userId
  #             - updateId
  #             - updateList
  #           properties:
  #             userId:
  #               type: string
  #             updateId:
  #               type: string
  #             updateList:
  #               type: string
  #     responses:
  #       200:    # status code
  #         description: User was updated sucessfully.
  # /list/remove:
  #   patch:
  #     summary: Removes an ID to specified list.
  #     operationId: user_data_access.delete_from_user
  #     consumes:
  #       - application/json
  #     parameters:
  #       - in: body
  #         name: userUpdate
  #         description: The user update data.
  #         schema:
  #           type: object
  #           required:
  #             - userId
  #             - updateId
  #             - updateList
  #           properties:
  #             userId:
  #               type: string
  #             updateId:
  #               type: string
  #             updateList:
  #               type: string
  #     responses:
  #       200:    # status code
  #         description: User was updated sucessfully.
  

  
parameters:
  id:
    name: id
    description: a user id
    in: path
    type: string
    required: true
  username:
    name: username
    description: a username
    in: path
    type: string
    required: true
  user:
    in: body
    name: user
    description: A user.
    schema:
      type: object
      required:
        - username
        - password
        - access_token
      properties:
        username:
          type: string
        password:
          type: string
        access_token:
          type: string
